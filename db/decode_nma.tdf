--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=10 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 23.1 cbx_cycloneii 2023:11:29:19:33:06:SC cbx_lpm_add_sub 2023:11:29:19:33:06:SC cbx_lpm_compare 2023:11:29:19:33:06:SC cbx_lpm_decode 2023:11:29:19:33:06:SC cbx_mgl 2023:11:29:19:43:53:SC cbx_nadder 2023:11:29:19:33:06:SC cbx_stratix 2023:11:29:19:33:06:SC cbx_stratixii 2023:11:29:19:33:05:SC  VERSION_END


-- Copyright (C) 2023  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_nma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode539w[1..0]	: WIRE;
	w_anode548w[3..0]	: WIRE;
	w_anode565w[3..0]	: WIRE;
	w_anode575w[3..0]	: WIRE;
	w_anode585w[3..0]	: WIRE;
	w_anode595w[3..0]	: WIRE;
	w_anode605w[3..0]	: WIRE;
	w_anode615w[3..0]	: WIRE;
	w_anode625w[3..0]	: WIRE;
	w_anode637w[1..0]	: WIRE;
	w_anode644w[3..0]	: WIRE;
	w_anode655w[3..0]	: WIRE;
	w_anode665w[3..0]	: WIRE;
	w_anode675w[3..0]	: WIRE;
	w_anode685w[3..0]	: WIRE;
	w_anode695w[3..0]	: WIRE;
	w_anode705w[3..0]	: WIRE;
	w_anode715w[3..0]	: WIRE;
	w_data537w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[9..0] = eq_wire[9..0];
	eq_wire[] = ( ( w_anode715w[3..3], w_anode705w[3..3], w_anode695w[3..3], w_anode685w[3..3], w_anode675w[3..3], w_anode665w[3..3], w_anode655w[3..3], w_anode644w[3..3]), ( w_anode625w[3..3], w_anode615w[3..3], w_anode605w[3..3], w_anode595w[3..3], w_anode585w[3..3], w_anode575w[3..3], w_anode565w[3..3], w_anode548w[3..3]));
	w_anode539w[] = ( (w_anode539w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode548w[] = ( (w_anode548w[2..2] & (! w_data537w[2..2])), (w_anode548w[1..1] & (! w_data537w[1..1])), (w_anode548w[0..0] & (! w_data537w[0..0])), w_anode539w[1..1]);
	w_anode565w[] = ( (w_anode565w[2..2] & (! w_data537w[2..2])), (w_anode565w[1..1] & (! w_data537w[1..1])), (w_anode565w[0..0] & w_data537w[0..0]), w_anode539w[1..1]);
	w_anode575w[] = ( (w_anode575w[2..2] & (! w_data537w[2..2])), (w_anode575w[1..1] & w_data537w[1..1]), (w_anode575w[0..0] & (! w_data537w[0..0])), w_anode539w[1..1]);
	w_anode585w[] = ( (w_anode585w[2..2] & (! w_data537w[2..2])), (w_anode585w[1..1] & w_data537w[1..1]), (w_anode585w[0..0] & w_data537w[0..0]), w_anode539w[1..1]);
	w_anode595w[] = ( (w_anode595w[2..2] & w_data537w[2..2]), (w_anode595w[1..1] & (! w_data537w[1..1])), (w_anode595w[0..0] & (! w_data537w[0..0])), w_anode539w[1..1]);
	w_anode605w[] = ( (w_anode605w[2..2] & w_data537w[2..2]), (w_anode605w[1..1] & (! w_data537w[1..1])), (w_anode605w[0..0] & w_data537w[0..0]), w_anode539w[1..1]);
	w_anode615w[] = ( (w_anode615w[2..2] & w_data537w[2..2]), (w_anode615w[1..1] & w_data537w[1..1]), (w_anode615w[0..0] & (! w_data537w[0..0])), w_anode539w[1..1]);
	w_anode625w[] = ( (w_anode625w[2..2] & w_data537w[2..2]), (w_anode625w[1..1] & w_data537w[1..1]), (w_anode625w[0..0] & w_data537w[0..0]), w_anode539w[1..1]);
	w_anode637w[] = ( (w_anode637w[0..0] & data_wire[3..3]), enable_wire);
	w_anode644w[] = ( (w_anode644w[2..2] & (! w_data537w[2..2])), (w_anode644w[1..1] & (! w_data537w[1..1])), (w_anode644w[0..0] & (! w_data537w[0..0])), w_anode637w[1..1]);
	w_anode655w[] = ( (w_anode655w[2..2] & (! w_data537w[2..2])), (w_anode655w[1..1] & (! w_data537w[1..1])), (w_anode655w[0..0] & w_data537w[0..0]), w_anode637w[1..1]);
	w_anode665w[] = ( (w_anode665w[2..2] & (! w_data537w[2..2])), (w_anode665w[1..1] & w_data537w[1..1]), (w_anode665w[0..0] & (! w_data537w[0..0])), w_anode637w[1..1]);
	w_anode675w[] = ( (w_anode675w[2..2] & (! w_data537w[2..2])), (w_anode675w[1..1] & w_data537w[1..1]), (w_anode675w[0..0] & w_data537w[0..0]), w_anode637w[1..1]);
	w_anode685w[] = ( (w_anode685w[2..2] & w_data537w[2..2]), (w_anode685w[1..1] & (! w_data537w[1..1])), (w_anode685w[0..0] & (! w_data537w[0..0])), w_anode637w[1..1]);
	w_anode695w[] = ( (w_anode695w[2..2] & w_data537w[2..2]), (w_anode695w[1..1] & (! w_data537w[1..1])), (w_anode695w[0..0] & w_data537w[0..0]), w_anode637w[1..1]);
	w_anode705w[] = ( (w_anode705w[2..2] & w_data537w[2..2]), (w_anode705w[1..1] & w_data537w[1..1]), (w_anode705w[0..0] & (! w_data537w[0..0])), w_anode637w[1..1]);
	w_anode715w[] = ( (w_anode715w[2..2] & w_data537w[2..2]), (w_anode715w[1..1] & w_data537w[1..1]), (w_anode715w[0..0] & w_data537w[0..0]), w_anode637w[1..1]);
	w_data537w[2..0] = data_wire[2..0];
END;
--VALID FILE
